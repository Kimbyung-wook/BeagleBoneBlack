/*
 * Author : David Kim
 *
 * data : 15.11.03
 *
 * This code can use gpio, pwm
 */


#include <stdio.h>
#include <time.h>
#include <string.h>
#include <unistd.h>
#include <termios.h>
#include <fcntl.h>

#define OUT "out"
#define IN "in"
#define ON 1
#define OFF 0
#define TRUE 1
#define FALSE 0
#define BAUDRATE B115200

//cape setting
int SettingCape(void);
//**********************************************************//
//GPIO Pin Setting
int InitPin(int PinNum);									//Pin Setting
int SetPinDir(int PinNum, char* either);					//Pin Direction Setting
int SetPinValue(int PinNum, int Value);						//Pin Value Setting (On/Off)
int GetPinValue(int PinNum);								//Getting Pin Value
int LEDOn(int PinNum);										//light LED
int LEDOff(int PinNum);										//darken LED
int CloseGPin(int PinNum);									//close pin
//**********************************************************//
//PWM pin Setting
int InitPWM(int ExpNum);									//PWM Pin Setting
int SetPWMPeriod(int ExpNum,int period);					//PWM Period Setting
int SetPWMDuty(int ExpNum,int duty);						//PWM Duty Setting
int SetPWMOnOff(int ExpNum, int run);						//PWM Running or die
int ClosePWMPin(int PinNum);								//Close PWM Pin
//**********************************************************//
//PID function
//void PIDcmd(int);
//AHRS Parsing
void AHRS_Parsing_RPY(char *,int *phi,int *theta,int *psi);
//**********************************************************//
int main()
{
	struct termios newtio;
	int cnt = 0;
	int buf_size=0;
	int phi=0;
	int theta=0;
	int psi=0;
	char buffer[1000] = {'\0',};
	char buf[10] = {'\0',};
	FILE *addr_RXD1;
	int RXD1i;			//FILE discripter
	FILE *RXD1;
	FILE *log;


	LEDOn(23);
	SettingCape();
	InitPin(47);		//Emergency button
	SetPinDir(47,IN);	//Emergency button

	//******************************************************//
	printf("Start!\n");
	//******************************************************//

	//Start function UART_setting(int uart_number)
	//echo uart > /sys/devices/ocp.3/P9_26_pinmux.42/state
	addr_RXD1 = fopen("/sys/devices/ocp.3/P9_26_pinmux.42/state","w");
	if(addr_RXD1 == NULL) printf("RXD1 Pin fail to set\n");
	fseek(addr_RXD1,0,SEEK_SET);
	fprintf(addr_RXD1,"%s","uart");
	fflush(addr_RXD1);
	fclose(addr_RXD1);
	printf("1st step\n");
	RXD1 = fopen("/dev/ttyO1","r");	//if reading, "r", but R/W, "r+"
	if(RXD1 == NULL) printf("RXD1 Port is not open!\n");
	fseek(RXD1,0,SEEK_SET);
	printf("2nd step\n");
	//Start - function UART_config(int uart_number,int baudrate);
	//여기서는 다른 헤더의 명령어 세트를 사용했다.
	RXD1i = open("/dev/ttyO1",O_RDWR | O_NOCTTY | O_NONBLOCK);
	memset( &newtio, 0, sizeof(newtio) );  // 시리얼 포트 통신 환경 설정
	newtio.c_cflag       = BAUDRATE | CS8 | CLOCAL | CREAD;
	newtio.c_iflag       = 0;              // NO_PARITY
	newtio.c_oflag       = 0;
	newtio.c_lflag       = 0;
	newtio.c_cc[VTIME]   = 0;
	newtio.c_cc[VMIN]    = 1;
	tcflush(RXD1i,TCIFLUSH);		//RXD1를
	tcsetattr(RXD1i, TCSANOW, &newtio); //즉시 적용한다.
	fcntl(RXD1i, F_SETFL, FNDELAY);
	//End - function UART_setting(int uart number,int baudrate);


	log = fopen("/home/debian/code/log.txt","w+");
	if(log == NULL) printf("log file not exist\n");

	printf("3rd step\n");
	while(!GetPinValue(47))
	{
		//printf("%dth step\n",cnt+4);
		fread(buf,1,1,RXD1);
		if(buf[0] == '$') buffer[0] = '\0';
		strcat(buffer,buf);
		if(buffer[strlen(buffer)-3] == '*')
			{
				AHRS_Parsing_RPY(buffer,&phi,&theta,&psi);
				printf("%s\t,theta : %d\n",buffer,theta);
			}

	}
	/*while(cnt<100)
	{
		fread(buf,1,1,RXD1);
		//fseek(RXD1,cnt++,SEEK_SET);
		printf("%c",buf[0]);
		cnt++;
	}*/
	fclose(RXD1);
	fclose(log);


	usleep(1000000);
	printf("End!\n");
	LEDOff(23);

	return 0;
}
//**********************************************************
//*                      Cape Function                     *
//**********************************************************

int SettingCape(void)
{
	FILE * io;
	io = fopen("/sys/devices/bone_capemgr.9/slots","w");
	if(io == NULL) printf("This cape cant enter");
	fseek(io,0,SEEK_SET);
	fprintf(io,"%s","cape-universalk");
	fflush(io);
	fclose(io);
	return 0;
}
//**********************************************************
//*                      GPIO Function                     *
//**********************************************************
int InitPin(int PinNum)
{
	FILE *io;

	io = fopen("/sys/class/gpio/export","w");				//file open - gpio-export
	if(io == NULL) printf("Pin Failed to initialize_InitPin\n");	//if fail to open, print
	fseek(io,0,SEEK_SET);									//go FilePointer to first
	fprintf(io,"%d",PinNum);								//Open PinNum
	fflush(io);												//FilePointer clear
	fclose(io);												//File close

	return 0;
}

int SetPinDir(int PinNum, char* either)					//'either' is direction (in or out)
{
	FILE *pdir;
	char buf[15];											//input "direction"
	char buf2[50] = "/sys/class/gpio/gpio";

	sprintf(buf,"%i",PinNum);								//duplicate PinNum to buf(memory)
	strcat(buf2,strcat(buf,"/direction"));					//make : buf2 + PinNum + "/direction"

	pdir = fopen(buf2,"w");									//open adress 'buf2' on writing condition
	if(pdir == NULL) printf("Direction failed to open\n");	//if fail to open, print
	fseek(pdir,0,SEEK_SET);									//go FilePointer to first
	fprintf(pdir,"%s",either);								//printf 'either' to filepointer 'pdir'
	fflush(pdir);
	fclose(pdir);

	return 0;
}

int SetPinValue(int PinNum, int Value)
{
	FILE *val;
	char buf[10];											//input "value"
	char buf2[50] = "/sys/class/gpio/gpio";

	sprintf(buf,"%i",PinNum);								//duplicate PinNum to buf(memory)
	strcat(buf2,strcat(buf,"/value"));						//make : buf2 + PinNum + "/value"

	val = fopen(buf2,"w");
	if(val == NULL) printf("Value failed to open\n");
	fseek(val,0,SEEK_SET);
	fprintf(val,"%d",Value);
	fflush(val);
	fclose(val);

	return 0;
}
int GetPinValue(int pinnum)
{
	FILE *val;
	int value;
	char buf[5];
	char buf2[50] = "/sys/class/gpio/gpio";

	//build file path to value file
	sprintf(buf,"%i",pinnum);
	strcat(buf2,strcat(buf,"/value"));

	val = fopen(buf2, "r");
	if(val == NULL) printf("Input value failed to open\n");
	fseek(val,0,SEEK_SET);
	fscanf(val,"%d",&value);
	fclose(val);

	return value;
}
int LEDOn(int PinNum)
{
	InitPin(PinNum);
	SetPinDir(PinNum,OUT);
	SetPinValue(PinNum,ON);
	return 1;
}
int LEDOff(int PinNum)
{
	SetPinValue(PinNum,OFF);
	CloseGPin(PinNum);
	return 1;
}
int CloseGPin(int PinNum)
{
	FILE *io;

	io = fopen("/sys/class/gpio/unexport","w");
	if(io == NULL) printf("Pin Failed to initialize_ClosePin\n");
	fseek(io,0,SEEK_SET);
	fprintf(io,"%d",PinNum);
	fflush(io);
	fclose(io);

	return 0;
}

//*************************************************
//*                PWM FUNCTIONS                  *
//*************************************************
int InitPWM(int expnum)
{
	//Function of this file is setting pwm port
	//if you want to use export number 4,
	//this function is entered to 4
	//1:echo pwm > /sys/devices/ocp.3/P9_14_pinmux.32/state
	//2:echo 3 > /sys/class/pwm/export
	//1:echo pwm > /sys/devices/ocp.3/P9_16_pinmux.34/state
	//2:echo 4 > /sys/class/pwm/export
	//3:echo 1000000000 > /sys/class/pwm/pwm3/period_ns
	//4:echo 500000000 > /sys/class/pwm/pwm3/duty_ns
	//5:echo 1 > /sys/class/pwm/pwm3/run
	FILE *pwmstate;
	FILE *pwmexp;
	char buf[22];
	char bufexp[5]="NULL,";
	//char buf[15];// /P9_14_pinmux.32 선언
	//나중에는 slot에 제대로 들어갔는지 확인하는 구문이 있어야함
	char buf1[50] = "/sys/devices/ocp.3";
	char buf2[50] = "/sys/class/pwm/export";
	switch(expnum)
	{
	case 0 :
		strcpy(buf,"/P9_29_pinmux.44"); //for cape-universalk
		break;
	case 1 :
		strcpy(buf,"/P9_31_pinmux.46"); //for cape-universalk
		break;
	case 3 :
		strcpy(buf,"/P9_14_pinmux.33"); //for cape-universalk
		break;
	case 4 :
		strcpy(buf,"/P9_16_pinmux.35"); //for cape-universalk
		break;
	case 5 :
		strcpy(buf,"/P8_45_pinmux.28"); //for cape-universalk
		break;
	case 6 :
		strcpy(buf,"/P8_46_pinmux.29"); //for cape-universalk
		break;
	default :
		printf("Error!\n");
		break;
	}
	strcat(buf1,strcat(buf,"/state"));
	// /sys/devices/ocp.3 /P9_14_pinmux.32 /state
	pwmstate = fopen(buf1,"w");
	if(pwmstate == NULL) printf("Init_PWM failed to setting");
	fseek(pwmstate,0,SEEK_SET);
	fprintf(pwmstate,"pwm");
	printf("pwm > %s\n",buf1);
	//1:echo pwm > /sys/devices/ocp.3/P9_14_pinmux.32/state
	//1:echo pwm > /sys/devices/ocp.3/P9_16_pinmux.34/state
	fflush(pwmstate);
	fclose(pwmstate);

	pwmexp = fopen(buf2,"w");
	if(pwmexp == NULL) printf("Init_PWM failed to export");
	sprintf(bufexp,"%i",expnum);
	fprintf(pwmexp,bufexp);
	//2:echo 3 > /sys/class/pwm/export
	//2:echo 4 > /sys/class/pwm/export
	fflush(pwmexp);
	fclose(pwmexp);

	return 1;
}

int SetPWMPeriod(int expnum,int period)
{
	FILE *pwm;
	char buf[15];
	char buf2[60] = "/sys/class/pwm/pwm";
	//3:echo 1000000000 > /sys/class/pwm/pwm3/period_ns

	sprintf(buf,"%i",expnum);
	strcat(strcat(buf2,buf),"/period_ns");
	// /sys/class/pwm/pwm3/period_ns

	pwm = fopen(buf2, "w");
	if(pwm == NULL) printf("PWM Period failed to open\n");
	fseek(pwm,0,SEEK_SET);
	fprintf(pwm,"%d",period);
	printf("%d > %s\n",period,buf2);
	fflush(pwm);
	fclose(pwm);

	return 0;
}
int SetPWMDuty(int expnum,int duty)
{
	FILE *pwm;
	char buf[15];
	char buf2[60] = "/sys/class/pwm/pwm";
	//4:echo 500000000 > /sys/class/pwm/pwm3/duty_ns

	sprintf(buf,"%i",expnum);
	strcat(strcat(buf2,buf),"/duty_ns");

	// /sys/class/pwm/pwm3/duty_ns
	pwm = fopen(buf2, "w");
	if(pwm == NULL) printf("PWM Duty failed to open\n");
	fseek(pwm,0,SEEK_SET);
	fprintf(pwm,"%d",duty);
	printf("%d > %s\n",duty,buf2);
	fflush(pwm);
	fclose(pwm);

	return 0;
}

int SetPWMOnOff(int expnum, int run)
{
	FILE *pwm;
	char buf[5];
	char buf2[50] = "/sys/class/pwm/pwm";
	sprintf(buf,"%i",expnum);
	strcat(strcat(buf2,buf),"/run");

	pwm = fopen(buf2, "w");
	if(pwm == NULL) printf("PWM Run failed to open\n");
	fseek(pwm,0,SEEK_SET);
	fprintf(pwm,"%d",run);
	printf("%d > %s\n",run,buf2);
	fflush(pwm);
	fclose(pwm);

	return 0;
}

int ClosePWMPin(int PinNum)
{
	FILE *io;

	io = fopen("/sys/class/pwm/unexport","w");
	if(io == NULL) printf("PWM Failed to initialize_ClosePWMPin\n");
	fseek(io,0,SEEK_SET);
	fprintf(io,"%d",PinNum);
	fflush(io);
	fclose(io);

	return 0;
}


//**********************************************************//
void AHRS_Parsing_RPY(char *Data,int *phi,int *theta,int *psi)
{
	int i,j,token_cnt=0;
	char temp[10]="'\0',";
	//char AHRS_datatype[10]="'\0',";
	//char AHRS_ID[10]="'\0',";
	char AHRS_phi[10]="'\0',";
	char AHRS_theta[10]="'\0',";
	char AHRS_psi[10]="'\0',";
	//char AHRS_chksum[10]="'\0',";
	//$RPY , 41 , 179.60 , 36.26 , 13.91 * 66
	for(i=0,token_cnt=0;i<strlen(Data);i++)
	{
		for(j=0;((Data[i+j]!=',')&&(Data[i+j]!='*'));j++)
		{
			temp[j]=Data[i+j];
			//printf("char : %c\n",temp[j]);
			if(temp[j] == '\0')
			{
				break;
			}
		}
		temp[j]= '\0';
		switch(token_cnt)
		{
			/*case 0 :
				strcpy(AHRS_datatype,temp);
				printf("Type : %s\n",AHRS_datatype);
				break;*/
			/*case 1 :
				strcpy(AHRS_ID,temp);
				printf("ID : %d\n",atoi(AHRS_ID));
				break;*/
			case 2 :
				strcpy(AHRS_phi,temp);
				*phi=atoi(AHRS_phi);
				//printf("Phi : %f\n",atof(AHRS_phi));
				break;
			case 3 :
				strcpy(AHRS_theta,temp);
				*theta=atoi(AHRS_theta);
				//printf("Theta : %f\n",atof(AHRS_theta));
				break;
			case 4 :
				strcpy(AHRS_psi,temp);
				*psi=atoi(AHRS_psi);
				//printf("Psi : %f\n",atof(AHRS_psi));
				break;
			/*case 5 :
				break;*/
		}
		token_cnt++;
		i+=j;
	}
}
