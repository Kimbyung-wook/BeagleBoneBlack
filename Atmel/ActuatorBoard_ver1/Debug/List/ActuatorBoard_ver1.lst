
AVRASM ver. 2.1.30  C:\My Note\수강하는 강의\3학년 2학기\종합설계 고상호교수님\AVR\ActuatorBoard_ver1\Debug\List\ActuatorBoard_ver1.asm Sat Jan 02 17:23:12 2016

C:\My Note\수강하는 강의\3학년 2학기\종합설계 고상호교수님\AVR\ActuatorBoard_ver1\Debug\List\ActuatorBoard_ver1.asm(1090): warning: Register r5 already defined by the .DEF directive
C:\My Note\수강하는 강의\3학년 2학기\종합설계 고상호교수님\AVR\ActuatorBoard_ver1\Debug\List\ActuatorBoard_ver1.asm(1091): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.10 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega128
                 ;Program type           : Application
                 ;Clock frequency        : 16.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 1024 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4096
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Flag=R5
                 	.DEF _Linecnt=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 008d 	JMP  _usart0_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00004f 0000      	.DB  0x0,0x0
                 
                 _0x0:
000050 6425
000051 252c
000052 2c73
000053 3a30      	.DB  0x25,0x64,0x2C,0x25,0x73,0x2C,0x30,0x3A
000054 6425
000055 312c
000056 253a
000057 0a64      	.DB  0x25,0x64,0x2C,0x31,0x3A,0x25,0x64,0xA
C:\My Note\수강하는 강의\3학년 2학기\종합설계 고상호교수님\AVR\ActuatorBoard_ver1\Debug\List\ActuatorBoard_ver1.asm(1149): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000059 0002      	.DW  0x02
00005a 0004      	.DW  0x04
00005b 009e      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00005c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005d 94f8      	CLI
00005e 27ee      	CLR  R30
00005f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000060 e0f1      	LDI  R31,1
000061 bff5      	OUT  MCUCR,R31
000062 bfe5      	OUT  MCUCR,R30
000063 93e0 006c 	STS  XMCRB,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e0a0      	LDI  R26,LOW(__SRAM_START)
00006e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006f 93ed      	ST   X+,R30
000070 9701      	SBIW R24,1
000071 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000072 ebe2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000073 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000074 9185      	LPM  R24,Z+
000075 9195      	LPM  R25,Z+
000076 9700      	SBIW R24,0
000077 f061      	BREQ __GLOBAL_INI_END
000078 91a5      	LPM  R26,Z+
000079 91b5      	LPM  R27,Z+
00007a 9005      	LPM  R0,Z+
00007b 9015      	LPM  R1,Z+
00007c 01bf      	MOVW R22,R30
00007d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007e 9005      	LPM  R0,Z+
00007f 920d      	ST   X+,R0
000080 9701      	SBIW R24,1
000081 f7e1      	BRNE __GLOBAL_INI_LOOP
000082 01fb      	MOVW R30,R22
000083 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000084 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000085 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000086 bfed      	OUT  SPL,R30
000087 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000088 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000089 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00008a e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00008b 940c 00a2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;//Intro
                 ;/*
                 ; * ActuatorBoard_ver1.c
                 ; *
                 ; * Created: 2015-12-30 오전 5:14:15
                 ; * Author: David Kim
                 ; */
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;
                 ;// Define global variable
                 ;unsigned char GetLine[20] = {'\0',};           // 받은 문자 저장
                 ;unsigned char Flag = 0;            // 문자열 flag
                 ;unsigned char Linecnt = 0;            // 위치 지시자
                 ;int Linecomma[4] = {0,};
                 ;
                 ;interrupt [USART0_RXC] void usart0_rx_isr(void)
                 ; 0000 0013 {
                 
                 	.CSEG
                 _usart0_rx_isr:
                 ; .FSTART _usart0_rx_isr
00008d 93aa      	ST   -Y,R26
00008e 93ba      	ST   -Y,R27
00008f 93ea      	ST   -Y,R30
000090 93fa      	ST   -Y,R31
000091 b7ef      	IN   R30,SREG
000092 93ea      	ST   -Y,R30
                 ; 0000 0014     GetLine[Linecnt++] = UDR0;
000093 2de4      	MOV  R30,R4
000094 9443      	INC  R4
000095 e0f0      	LDI  R31,0
000096 50e0      	SUBI R30,LOW(-_GetLine)
000097 4ffb      	SBCI R31,HIGH(-_GetLine)
000098 01df      	MOVW R26,R30
000099 b1ec      	IN   R30,0xC
00009a 93ec      	ST   X,R30
                 ; 0000 0015 }
00009b 91e9      	LD   R30,Y+
00009c bfef      	OUT  SREG,R30
00009d 91f9      	LD   R31,Y+
00009e 91e9      	LD   R30,Y+
00009f 91b9      	LD   R27,Y+
0000a0 91a9      	LD   R26,Y+
0000a1 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0018 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0019 // Define local variable
                 ; 0000 001A     unsigned char Servo_duty[2] = {'\0',};
                 ; 0000 001B     int i=0;
                 ; 0000 001C     int j=0;
                 ; 0000 001D     unsigned char StartLine = 0;
                 ; 0000 001E     int Select = 0;
                 ; 0000 001F 
                 ; 0000 0020 // Function : Bit7=In Bit6=Out Bit5=Out Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0021     DDRB = 0b01100000;
0000a2 9724      	SBIW R28,4
0000a3 e0e0      	LDI  R30,LOW(0)
0000a4 83e8      	ST   Y,R30
0000a5 83e9      	STD  Y+1,R30
0000a6 83ea      	STD  Y+2,R30
0000a7 83eb      	STD  Y+3,R30
                 ;	Servo_duty -> Y+2
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	StartLine -> R21
                 ;	Select -> Y+0
                +
0000a8 e000     +LDI R16 , LOW ( 0 )
0000a9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000aa e020     +LDI R18 , LOW ( 0 )
0000ab e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0000ac e050      	LDI  R21,0
0000ad e6e0      	LDI  R30,LOW(96)
0000ae bbe7      	OUT  0x17,R30
                 ; 0000 0022 // Identifier of duty signal
                 ; 0000 0023     DDRA = 0b11111111;
0000af efef      	LDI  R30,LOW(255)
0000b0 bbea      	OUT  0x1A,R30
                 ; 0000 0024 
                 ; 0000 0025 // Timer/Counter 1 initialization
                 ; 0000 0026 /* Prescaler : 8
                 ; 0000 0027 // Mode: Fast PWM top=ICR1
                 ; 0000 0028 // OC1A output: Non-Inverted PWM
                 ; 0000 0029 // OC1B output: Non-Inverted PWM
                 ; 0000 002A // Timer Period: 20 ms
                 ; 0000 002B // Output Pulse(s):
                 ; 0000 002C // OC1A Period: 20 ms
                 ; 0000 002D // OC1B Period: 20 ms  */
                 ; 0000 002E     TCCR1A = 0b10100010;
0000b1 eae2      	LDI  R30,LOW(162)
0000b2 bdef      	OUT  0x2F,R30
                 ; 0000 002F     TCCR1B = 0b00011010;
0000b3 e1ea      	LDI  R30,LOW(26)
0000b4 bdee      	OUT  0x2E,R30
                 ; 0000 0030     ICR1 = 39999;
0000b5 e3ef      	LDI  R30,LOW(39999)
0000b6 e9fc      	LDI  R31,HIGH(39999)
0000b7 bdf7      	OUT  0x26+1,R31
0000b8 bde6      	OUT  0x26,R30
                 ; 0000 0031     OCR1A = 0;
0000b9 e0e0      	LDI  R30,LOW(0)
0000ba e0f0      	LDI  R31,HIGH(0)
0000bb bdfb      	OUT  0x2A+1,R31
0000bc bdea      	OUT  0x2A,R30
                 ; 0000 0032     OCR1B = 0;
0000bd bdf9      	OUT  0x28+1,R31
0000be bde8      	OUT  0x28,R30
                 ; 0000 0033 
                 ; 0000 0034 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0035     TIMSK = 0b00000000;
0000bf bfe7      	OUT  0x37,R30
                 ; 0000 0036 
                 ; 0000 0037 // USART0 initialization
                 ; 0000 0038 /* Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0039 // USART0 Receiver: On
                 ; 0000 003A // USART0 Transmitter: Off
                 ; 0000 003B // USART0 Mode: Asynchronous
                 ; 0000 003C // USART0 Baud Rate: 38400  */
                 ; 0000 003D     UCSR0A = 0b00000000;
0000c0 b9eb      	OUT  0xB,R30
                 ; 0000 003E     UCSR0B = 0b10011000;
0000c1 e9e8      	LDI  R30,LOW(152)
0000c2 b9ea      	OUT  0xA,R30
                 ; 0000 003F     UCSR0C = 0b00000110;
0000c3 e0e6      	LDI  R30,LOW(6)
0000c4 93e0 0095 	STS  149,R30
                 ; 0000 0040     UBRR0H=0x00;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 93e0 0090 	STS  144,R30
                 ; 0000 0041     UBRR0L=0x19;
0000c9 e1e9      	LDI  R30,LOW(25)
0000ca b9e9      	OUT  0x9,R30
                 ; 0000 0042 
                 ; 0000 0043 // Global enable interrupts
                 ; 0000 0044 #asm("sei")
0000cb 9478      	sei
                 ; 0000 0045 
                 ; 0000 0046 
                 ; 0000 0047     PORTA = 0xFF;
0000cc efef      	LDI  R30,LOW(255)
0000cd 940e 02e2 	CALL SUBOPT_0x0
                 ; 0000 0048     UDR0 = '*';
                 ; 0000 0049     delay_ms(500);
                 ; 0000 004A     PORTA = 0;
0000cf e0e0      	LDI  R30,LOW(0)
0000d0 940e 02e2 	CALL SUBOPT_0x0
                 ; 0000 004B     UDR0 = '*';
                 ; 0000 004C     delay_ms(500);
                 ; 0000 004D 
                 ; 0000 004E while (1)
                 _0x3:
                 ; 0000 004F     {
                 ; 0000 0050         // 코딩 가정 및 통신 프로토콜
                 ; 0000 0051         /*
                 ; 0000 0052          아래와 같은 코딩 가정은
                 ; 0000 0053          통신 주기 내에 루프가 한번 이상 돌 것을 예상하고 작성함
                 ; 0000 0054          Comm. Protocol ( - 는 char 자료형임)
                 ; 0000 0055          <-,->
                 ; 0000 0056          < : First Character
                 ; 0000 0057          , : seperator
                 ; 0000 0058          > : Last Character
                 ; 0000 0059         자료형은 숫자 0 ~ 250 사이로 입력되며
                 ; 0000 005A         이로 인해 듀티는 10~20%로 움직인다.
                 ; 0000 005B         */
                 ; 0000 005C         for(i=0,j=1;i<=Linecnt;i++)
                +
0000d2 e000     +LDI R16 , LOW ( 0 )
0000d3 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0000d4 e021     +LDI R18 , LOW ( 1 )
0000d5 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 _0x7:
0000d6 2de4      	MOV  R30,R4
0000d7 01d8      	MOVW R26,R16
0000d8 e0f0      	LDI  R31,0
0000d9 17ea      	CP   R30,R26
0000da 07fb      	CPC  R31,R27
0000db f11c      	BRLT _0x8
                 ; 0000 005D         {
                 ; 0000 005E             if(GetLine[i] == '<')
0000dc 940e 02e9 	CALL SUBOPT_0x1
0000de 33ac      	CPI  R26,LOW(0x3C)
0000df f411      	BRNE _0x9
                 ; 0000 005F                 Flag = Flag | 0b00000001;
0000e0 e0e1      	LDI  R30,LOW(1)
0000e1 2a5e      	OR   R5,R30
                 ; 0000 0060             if(GetLine[i] == ',')
                 _0x9:
0000e2 940e 02e9 	CALL SUBOPT_0x1
0000e4 32ac      	CPI  R26,LOW(0x2C)
0000e5 f459      	BRNE _0xA
                 ; 0000 0061                 Linecomma[j++]=i;
0000e6 01f9      	MOVW R30,R18
                +
0000e7 5f2f     +SUBI R18 , LOW ( - 1 )
0000e8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0000e9 e1a4      	LDI  R26,LOW(_Linecomma)
0000ea e0b5      	LDI  R27,HIGH(_Linecomma)
0000eb 0fee      	LSL  R30
0000ec 1fff      	ROL  R31
0000ed 0fea      	ADD  R30,R26
0000ee 1ffb      	ADC  R31,R27
0000ef 8300      	ST   Z,R16
0000f0 8311      	STD  Z+1,R17
                 ; 0000 0062             if(GetLine[i] == '>')
                 _0xA:
0000f1 940e 02e9 	CALL SUBOPT_0x1
0000f3 33ae      	CPI  R26,LOW(0x3E)
0000f4 f439      	BRNE _0xB
                 ; 0000 0063             {
                 ; 0000 0064                 Flag = Flag | 0b00000010;
0000f5 e0e2      	LDI  R30,LOW(2)
0000f6 2a5e      	OR   R5,R30
                 ; 0000 0065                 GetLine[i+1] = '\0';
0000f7 01f8      	MOVW R30,R16
                +
0000f8 5fef     +SUBI R30 , LOW ( - _GetLine - ( 1 ) )
0000f9 4ffa     +SBCI R31 , HIGH ( - _GetLine - ( 1 ) )
                 	__ADDW1MN _GetLine,1
0000fa e0a0      	LDI  R26,LOW(0)
0000fb 83a0      	STD  Z+0,R26
                 ; 0000 0066             }
                 ; 0000 0067         }
                 _0xB:
                +
0000fc 5f0f     +SUBI R16 , LOW ( - 1 )
0000fd 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000fe cfd7      	RJMP _0x7
                 _0x8:
                 ; 0000 0068         /*UDR0 = '\n';
                 ; 0000 0069         delay_ms(10);
                 ; 0000 006A         UDR0 = '-';
                 ; 0000 006B         UDR0 = Flag + 48;
                 ; 0000 006C         delay_ms(10);
                 ; 0000 006D         UDR0 = '-';
                 ; 0000 006E         UDR0 = Linecnt + 48;
                 ; 0000 006F         delay_ms(10);
                 ; 0000 0070         UDR0 = '-';
                 ; 0000 0071         delay_ms(10);
                 ; 0000 0072         UDR0 = '\n';*/
                 ; 0000 0073         if(Flag == 0b00000011)
0000ff e0e3      	LDI  R30,LOW(3)
000100 15e5      	CP   R30,R5
000101 f009      	BREQ PC+2
000102 c056      	RJMP _0xC
                 ; 0000 0074         {
                 ; 0000 0075             Servo_duty[0] = GetLine[Linecomma[0]+1];
000103 91e0 0514 	LDS  R30,_Linecomma
000105 91f0 0515 	LDS  R31,_Linecomma+1
                +
000107 5fef     +SUBI R30 , LOW ( - _GetLine - ( 1 ) )
000108 4ffa     +SBCI R31 , HIGH ( - _GetLine - ( 1 ) )
                 	__ADDW1MN _GetLine,1
000109 81e0      	LD   R30,Z
00010a 83ea      	STD  Y+2,R30
                 ; 0000 0076             Servo_duty[1] = GetLine[Linecomma[1]+1];
                +
00010b 91e0 0516+LDS R30 , _Linecomma + ( 2 )
00010d 91f0 0517+LDS R31 , _Linecomma + ( 2 ) + 1
                 	__GETW1MN _Linecomma,2
                +
00010f 5fef     +SUBI R30 , LOW ( - _GetLine - ( 1 ) )
000110 4ffa     +SBCI R31 , HIGH ( - _GetLine - ( 1 ) )
                 	__ADDW1MN _GetLine,1
000111 81e0      	LD   R30,Z
000112 83eb      	STD  Y+3,R30
                 ; 0000 0077             PORTA = Servo_duty[Select];
000113 940e 02ef 	CALL SUBOPT_0x2
000115 bbeb      	OUT  0x1B,R30
                 ; 0000 0078             OCR1A = (Servo_duty[Select]-125)*((ICR1+1)/2500)+3000;
000116 940e 02ef 	CALL SUBOPT_0x2
000118 e0f0      	LDI  R31,0
000119 57ed      	SUBI R30,LOW(125)
00011a 40f0      	SBCI R31,HIGH(125)
00011b 01bf      	MOVW R22,R30
00011c b5e6      	IN   R30,0x26
00011d b5f7      	IN   R31,0x26+1
00011e 9631      	ADIW R30,1
00011f 01df      	MOVW R26,R30
000120 ece4      	LDI  R30,LOW(2500)
000121 e0f9      	LDI  R31,HIGH(2500)
000122 940e 033b 	CALL __DIVW21U
000124 01db      	MOVW R26,R22
000125 940e 0333 	CALL __MULW12U
000127 54e8      	SUBI R30,LOW(-3000)
000128 4ff4      	SBCI R31,HIGH(-3000)
000129 bdfb      	OUT  0x2A+1,R31
00012a bdea      	OUT  0x2A,R30
                 ; 0000 0079             printf("%d,%s,0:%d,1:%d\n",Servo_duty[Select],GetLine,Linecomma[0],Linecomma[1]);
                +
00012b eae0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00012c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00012d 93fa      	ST   -Y,R31
00012e 93ea      	ST   -Y,R30
00012f 81ea      	LDD  R30,Y+2
000130 81fb      	LDD  R31,Y+2+1
000131 01de      	MOVW R26,R28
000132 9614      	ADIW R26,4
000133 0fae      	ADD  R26,R30
000134 1fbf      	ADC  R27,R31
000135 91ec      	LD   R30,X
000136 27ff      	CLR  R31
000137 2766      	CLR  R22
000138 2777      	CLR  R23
000139 940e 0356 	CALL __PUTPARD1
00013b e0e0      	LDI  R30,LOW(_GetLine)
00013c e0f5      	LDI  R31,HIGH(_GetLine)
00013d 2766      	CLR  R22
00013e 2777      	CLR  R23
00013f 940e 0356 	CALL __PUTPARD1
000141 91e0 0514 	LDS  R30,_Linecomma
000143 91f0 0515 	LDS  R31,_Linecomma+1
000145 940e 032e 	CALL __CWD1
000147 940e 0356 	CALL __PUTPARD1
                +
000149 91e0 0516+LDS R30 , _Linecomma + ( 2 )
00014b 91f0 0517+LDS R31 , _Linecomma + ( 2 ) + 1
                 	__GETW1MN _Linecomma,2
00014d 940e 032e 	CALL __CWD1
00014f 940e 0356 	CALL __PUTPARD1
000151 e180      	LDI  R24,16
000152 940e 02a4 	CALL _printf
000154 9662      	ADIW R28,18
                 ; 0000 007A             Flag = 0;     // Last character 발견 취소, 다시 읽어
000155 2455      	CLR  R5
                 ; 0000 007B             Linecnt = 0;    // 처음부터 다시 읽기
000156 2444      	CLR  R4
                 ; 0000 007C             StartLine = 0;
000157 e050      	LDI  R21,LOW(0)
                 ; 0000 007D 
                 ; 0000 007E         }
                 ; 0000 007F         else
000158 c001      	RJMP _0xD
                 _0xC:
                 ; 0000 0080             continue;
000159 cf78      	RJMP _0x3
                 ; 0000 0081     }
                 _0xD:
00015a cf77      	RJMP _0x3
                 ; 0000 0082 }
                 _0xE:
00015b cfff      	RJMP _0xE
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00015c 93aa      	ST   -Y,R26
                 putchar0:
00015d 9b5d           sbis usr,udre
00015e cffe           rjmp putchar0
00015f 81e8           ld   r30,y
000160 b9ec           out  udr,r30
000161 9621      	ADIW R28,1
000162 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000163 93ba      	ST   -Y,R27
000164 93aa      	ST   -Y,R26
000165 81aa      	LDD  R26,Y+2
000166 dff5      	RCALL _putchar
000167 81a8      	LD   R26,Y
000168 81b9      	LDD  R27,Y+1
000169 91ed      	LD   R30,X+
00016a 91fd      	LD   R31,X+
00016b 9631      	ADIW R30,1
00016c 93fe      	ST   -X,R31
00016d 93ee      	ST   -X,R30
00016e 9623      	ADIW R28,3
00016f 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000170 93ba      	ST   -Y,R27
000171 93aa      	ST   -Y,R26
000172 9726      	SBIW R28,6
000173 940e 035b 	CALL __SAVELOCR6
000175 e010      	LDI  R17,0
000176 85ac      	LDD  R26,Y+12
000177 85bd      	LDD  R27,Y+12+1
000178 e0e0      	LDI  R30,LOW(0)
000179 e0f0      	LDI  R31,HIGH(0)
00017a 93ed      	ST   X+,R30
00017b 93fc      	ST   X,R31
                 _0x2000016:
00017c 89ea      	LDD  R30,Y+18
00017d 89fb      	LDD  R31,Y+18+1
00017e 9631      	ADIW R30,1
00017f 8bea      	STD  Y+18,R30
000180 8bfb      	STD  Y+18+1,R31
000181 9731      	SBIW R30,1
000182 91e4      	LPM  R30,Z
000183 2f2e      	MOV  R18,R30
000184 30e0      	CPI  R30,0
000185 f409      	BRNE PC+2
000186 c115      	RJMP _0x2000018
000187 2fe1      	MOV  R30,R17
000188 30e0      	CPI  R30,0
000189 f439      	BRNE _0x200001C
00018a 3225      	CPI  R18,37
00018b f411      	BRNE _0x200001D
00018c e011      	LDI  R17,LOW(1)
00018d c002      	RJMP _0x200001E
                 _0x200001D:
00018e 940e 02f7 	CALL SUBOPT_0x3
                 _0x200001E:
000190 c10a      	RJMP _0x200001B
                 _0x200001C:
000191 30e1      	CPI  R30,LOW(0x1)
000192 f4a9      	BRNE _0x200001F
000193 3225      	CPI  R18,37
000194 f419      	BRNE _0x2000020
000195 940e 02f7 	CALL SUBOPT_0x3
000197 c102      	RJMP _0x20000CC
                 _0x2000020:
000198 e012      	LDI  R17,LOW(2)
000199 e040      	LDI  R20,LOW(0)
00019a e000      	LDI  R16,LOW(0)
00019b 322d      	CPI  R18,45
00019c f411      	BRNE _0x2000021
00019d e001      	LDI  R16,LOW(1)
00019e c0fc      	RJMP _0x200001B
                 _0x2000021:
00019f 322b      	CPI  R18,43
0001a0 f411      	BRNE _0x2000022
0001a1 e24b      	LDI  R20,LOW(43)
0001a2 c0f8      	RJMP _0x200001B
                 _0x2000022:
0001a3 3220      	CPI  R18,32
0001a4 f411      	BRNE _0x2000023
0001a5 e240      	LDI  R20,LOW(32)
0001a6 c0f4      	RJMP _0x200001B
                 _0x2000023:
0001a7 c002      	RJMP _0x2000024
                 _0x200001F:
0001a8 30e2      	CPI  R30,LOW(0x2)
0001a9 f439      	BRNE _0x2000025
                 _0x2000024:
0001aa e050      	LDI  R21,LOW(0)
0001ab e013      	LDI  R17,LOW(3)
0001ac 3320      	CPI  R18,48
0001ad f411      	BRNE _0x2000026
0001ae 6800      	ORI  R16,LOW(128)
0001af c0eb      	RJMP _0x200001B
                 _0x2000026:
0001b0 c003      	RJMP _0x2000027
                 _0x2000025:
0001b1 30e3      	CPI  R30,LOW(0x3)
0001b2 f009      	BREQ PC+2
0001b3 c0e7      	RJMP _0x200001B
                 _0x2000027:
0001b4 3320      	CPI  R18,48
0001b5 f010      	BRLO _0x200002A
0001b6 332a      	CPI  R18,58
0001b7 f008      	BRLO _0x200002B
                 _0x200002A:
0001b8 c007      	RJMP _0x2000029
                 _0x200002B:
0001b9 e0aa      	LDI  R26,LOW(10)
0001ba 9f5a      	MUL  R21,R26
0001bb 2d50      	MOV  R21,R0
0001bc 2fe2      	MOV  R30,R18
0001bd 53e0      	SUBI R30,LOW(48)
0001be 0f5e      	ADD  R21,R30
0001bf c0db      	RJMP _0x200001B
                 _0x2000029:
0001c0 2fe2      	MOV  R30,R18
0001c1 36e3      	CPI  R30,LOW(0x63)
0001c2 f449      	BRNE _0x200002F
0001c3 940e 02fe 	CALL SUBOPT_0x4
0001c5 89e8      	LDD  R30,Y+16
0001c6 89f9      	LDD  R31,Y+16+1
0001c7 81a4      	LDD  R26,Z+4
0001c8 93aa      	ST   -Y,R26
0001c9 940e 0304 	CALL SUBOPT_0x5
0001cb c0ce      	RJMP _0x2000030
                 _0x200002F:
0001cc 37e3      	CPI  R30,LOW(0x73)
0001cd f441      	BRNE _0x2000032
0001ce 940e 02fe 	CALL SUBOPT_0x4
0001d0 940e 030a 	CALL SUBOPT_0x6
0001d2 940e 02c9 	CALL _strlen
0001d4 2f1e      	MOV  R17,R30
0001d5 c00a      	RJMP _0x2000033
                 _0x2000032:
0001d6 37e0      	CPI  R30,LOW(0x70)
0001d7 f461      	BRNE _0x2000035
0001d8 940e 02fe 	CALL SUBOPT_0x4
0001da 940e 030a 	CALL SUBOPT_0x6
0001dc 940e 02d5 	CALL _strlenf
0001de 2f1e      	MOV  R17,R30
0001df 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001e0 6002      	ORI  R16,LOW(2)
0001e1 770f      	ANDI R16,LOW(127)
0001e2 e030      	LDI  R19,LOW(0)
0001e3 c034      	RJMP _0x2000036
                 _0x2000035:
0001e4 36e4      	CPI  R30,LOW(0x64)
0001e5 f011      	BREQ _0x2000039
0001e6 36e9      	CPI  R30,LOW(0x69)
0001e7 f411      	BRNE _0x200003A
                 _0x2000039:
0001e8 6004      	ORI  R16,LOW(4)
0001e9 c002      	RJMP _0x200003B
                 _0x200003A:
0001ea 37e5      	CPI  R30,LOW(0x75)
0001eb f431      	BRNE _0x200003C
                 _0x200003B:
0001ec e8ec      	LDI  R30,LOW(_tbl10_G100*2)
0001ed e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001ee 83ee      	STD  Y+6,R30
0001ef 83ff      	STD  Y+6+1,R31
0001f0 e015      	LDI  R17,LOW(5)
0001f1 c00c      	RJMP _0x200003D
                 _0x200003C:
0001f2 35e8      	CPI  R30,LOW(0x58)
0001f3 f411      	BRNE _0x200003F
0001f4 6008      	ORI  R16,LOW(8)
0001f5 c003      	RJMP _0x2000040
                 _0x200003F:
0001f6 37e8      	CPI  R30,LOW(0x78)
0001f7 f009      	BREQ PC+2
0001f8 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001f9 e9e6      	LDI  R30,LOW(_tbl16_G100*2)
0001fa e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001fb 83ee      	STD  Y+6,R30
0001fc 83ff      	STD  Y+6+1,R31
0001fd e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001fe ff02      	SBRS R16,2
0001ff c014      	RJMP _0x2000042
000200 940e 02fe 	CALL SUBOPT_0x4
000202 940e 0314 	CALL SUBOPT_0x7
000204 85ab      	LDD  R26,Y+11
000205 23aa      	TST  R26
000206 f43a      	BRPL _0x2000043
000207 85ea      	LDD  R30,Y+10
000208 85fb      	LDD  R31,Y+10+1
000209 940e 032a 	CALL __ANEGW1
00020b 87ea      	STD  Y+10,R30
00020c 87fb      	STD  Y+10+1,R31
00020d e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00020e 3040      	CPI  R20,0
00020f f011      	BREQ _0x2000044
000210 5f1f      	SUBI R17,-LOW(1)
000211 c001      	RJMP _0x2000045
                 _0x2000044:
000212 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000213 c004      	RJMP _0x2000046
                 _0x2000042:
000214 940e 02fe 	CALL SUBOPT_0x4
000216 940e 0314 	CALL SUBOPT_0x7
                 _0x2000046:
                 _0x2000036:
000218 fd00      	SBRC R16,0
000219 c011      	RJMP _0x2000047
                 _0x2000048:
00021a 1715      	CP   R17,R21
00021b f478      	BRSH _0x200004A
00021c ff07      	SBRS R16,7
00021d c008      	RJMP _0x200004B
00021e ff02      	SBRS R16,2
00021f c004      	RJMP _0x200004C
000220 7f0b      	ANDI R16,LOW(251)
000221 2f24      	MOV  R18,R20
000222 5011      	SUBI R17,LOW(1)
000223 c001      	RJMP _0x200004D
                 _0x200004C:
000224 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000225 c001      	RJMP _0x200004E
                 _0x200004B:
000226 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000227 940e 02f7 	CALL SUBOPT_0x3
000229 5051      	SUBI R21,LOW(1)
00022a cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00022b 2f31      	MOV  R19,R17
00022c ff01      	SBRS R16,1
00022d c017      	RJMP _0x200004F
                 _0x2000050:
00022e 3030      	CPI  R19,0
00022f f0a1      	BREQ _0x2000052
000230 ff03      	SBRS R16,3
000231 c006      	RJMP _0x2000053
000232 81ee      	LDD  R30,Y+6
000233 81ff      	LDD  R31,Y+6+1
000234 9125      	LPM  R18,Z+
000235 83ee      	STD  Y+6,R30
000236 83ff      	STD  Y+6+1,R31
000237 c005      	RJMP _0x2000054
                 _0x2000053:
000238 81ae      	LDD  R26,Y+6
000239 81bf      	LDD  R27,Y+6+1
00023a 912d      	LD   R18,X+
00023b 83ae      	STD  Y+6,R26
00023c 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00023d 940e 02f7 	CALL SUBOPT_0x3
00023f 3050      	CPI  R21,0
000240 f009      	BREQ _0x2000055
000241 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000242 5031      	SUBI R19,LOW(1)
000243 cfea      	RJMP _0x2000050
                 _0x2000052:
000244 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000245 e320      	LDI  R18,LOW(48)
000246 81ee      	LDD  R30,Y+6
000247 81ff      	LDD  R31,Y+6+1
000248 940e 0352 	CALL __GETW1PF
00024a 87e8      	STD  Y+8,R30
00024b 87f9      	STD  Y+8+1,R31
00024c 81ee      	LDD  R30,Y+6
00024d 81ff      	LDD  R31,Y+6+1
00024e 9632      	ADIW R30,2
00024f 83ee      	STD  Y+6,R30
000250 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000251 85e8      	LDD  R30,Y+8
000252 85f9      	LDD  R31,Y+8+1
000253 85aa      	LDD  R26,Y+10
000254 85bb      	LDD  R27,Y+10+1
000255 17ae      	CP   R26,R30
000256 07bf      	CPC  R27,R31
000257 f050      	BRLO _0x200005C
000258 5f2f      	SUBI R18,-LOW(1)
000259 85a8      	LDD  R26,Y+8
00025a 85b9      	LDD  R27,Y+8+1
00025b 85ea      	LDD  R30,Y+10
00025c 85fb      	LDD  R31,Y+10+1
00025d 1bea      	SUB  R30,R26
00025e 0bfb      	SBC  R31,R27
00025f 87ea      	STD  Y+10,R30
000260 87fb      	STD  Y+10+1,R31
000261 cfef      	RJMP _0x200005A
                 _0x200005C:
000262 332a      	CPI  R18,58
000263 f028      	BRLO _0x200005D
000264 ff03      	SBRS R16,3
000265 c002      	RJMP _0x200005E
000266 5f29      	SUBI R18,-LOW(7)
000267 c001      	RJMP _0x200005F
                 _0x200005E:
000268 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000269 fd04      	SBRC R16,4
00026a c01a      	RJMP _0x2000061
00026b 3321      	CPI  R18,49
00026c f420      	BRSH _0x2000063
00026d 85a8      	LDD  R26,Y+8
00026e 85b9      	LDD  R27,Y+8+1
00026f 9711      	SBIW R26,1
000270 f409      	BRNE _0x2000062
                 _0x2000063:
000271 c009      	RJMP _0x20000CD
                 _0x2000062:
000272 1753      	CP   R21,R19
000273 f010      	BRLO _0x2000067
000274 ff00      	SBRS R16,0
000275 c001      	RJMP _0x2000068
                 _0x2000067:
000276 c013      	RJMP _0x2000066
                 _0x2000068:
000277 e220      	LDI  R18,LOW(32)
000278 ff07      	SBRS R16,7
000279 c00b      	RJMP _0x2000069
00027a e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00027b 6100      	ORI  R16,LOW(16)
00027c ff02      	SBRS R16,2
00027d c007      	RJMP _0x200006A
00027e 7f0b      	ANDI R16,LOW(251)
00027f 934a      	ST   -Y,R20
000280 940e 0304 	CALL SUBOPT_0x5
000282 3050      	CPI  R21,0
000283 f009      	BREQ _0x200006B
000284 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000285 940e 02f7 	CALL SUBOPT_0x3
000287 3050      	CPI  R21,0
000288 f009      	BREQ _0x200006C
000289 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00028a 5031      	SUBI R19,LOW(1)
00028b 85a8      	LDD  R26,Y+8
00028c 85b9      	LDD  R27,Y+8+1
00028d 9712      	SBIW R26,2
00028e f008      	BRLO _0x2000059
00028f cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000290 ff00      	SBRS R16,0
000291 c008      	RJMP _0x200006D
                 _0x200006E:
000292 3050      	CPI  R21,0
000293 f031      	BREQ _0x2000070
000294 5051      	SUBI R21,LOW(1)
000295 e2e0      	LDI  R30,LOW(32)
000296 93ea      	ST   -Y,R30
000297 940e 0304 	CALL SUBOPT_0x5
000299 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00029a e010      	LDI  R17,LOW(0)
                 _0x200001B:
00029b cee0      	RJMP _0x2000016
                 _0x2000018:
00029c 85ac      	LDD  R26,Y+12
00029d 85bd      	LDD  R27,Y+12+1
00029e 940e 034e 	CALL __GETW1P
0002a0 940e 0362 	CALL __LOADLOCR6
0002a2 9664      	ADIW R28,20
0002a3 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
0002a4 92ff      	PUSH R15
0002a5 2ef8      	MOV  R15,R24
0002a6 9726      	SBIW R28,6
0002a7 931a      	ST   -Y,R17
0002a8 930a      	ST   -Y,R16
0002a9 01de      	MOVW R26,R28
0002aa 9614      	ADIW R26,4
0002ab 940e 0326 	CALL __ADDW2R15
0002ad 018d      	MOVW R16,R26
0002ae e0e0      	LDI  R30,LOW(0)
0002af 83ec      	STD  Y+4,R30
0002b0 83ed      	STD  Y+4+1,R30
0002b1 83ee      	STD  Y+6,R30
0002b2 83ef      	STD  Y+6+1,R30
0002b3 01de      	MOVW R26,R28
0002b4 9618      	ADIW R26,8
0002b5 940e 0326 	CALL __ADDW2R15
0002b7 940e 034e 	CALL __GETW1P
0002b9 93fa      	ST   -Y,R31
0002ba 93ea      	ST   -Y,R30
0002bb 931a      	ST   -Y,R17
0002bc 930a      	ST   -Y,R16
0002bd e6e3      	LDI  R30,LOW(_put_usart_G100)
0002be e0f1      	LDI  R31,HIGH(_put_usart_G100)
0002bf 93fa      	ST   -Y,R31
0002c0 93ea      	ST   -Y,R30
0002c1 01de      	MOVW R26,R28
0002c2 9618      	ADIW R26,8
0002c3 deac      	RCALL __print_G100
0002c4 8119      	LDD  R17,Y+1
0002c5 8108      	LDD  R16,Y+0
0002c6 9628      	ADIW R28,8
0002c7 90ff      	POP  R15
0002c8 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0002c9 93ba      	ST   -Y,R27
0002ca 93aa      	ST   -Y,R26
0002cb 91a9          ld   r26,y+
0002cc 91b9          ld   r27,y+
0002cd 27ee          clr  r30
0002ce 27ff          clr  r31
                 strlen0:
0002cf 916d          ld   r22,x+
0002d0 2366          tst  r22
0002d1 f011          breq strlen1
0002d2 9631          adiw r30,1
0002d3 cffb          rjmp strlen0
                 strlen1:
0002d4 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0002d5 93ba      	ST   -Y,R27
0002d6 93aa      	ST   -Y,R26
0002d7 27aa          clr  r26
0002d8 27bb          clr  r27
0002d9 91e9          ld   r30,y+
0002da 91f9          ld   r31,y+
                 strlenf0:
0002db 9005      	lpm  r0,z+
0002dc 2000          tst  r0
0002dd f011          breq strlenf1
0002de 9611          adiw r26,1
0002df cffb          rjmp strlenf0
                 strlenf1:
0002e0 01fd          movw r30,r26
0002e1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _GetLine:
000500           	.BYTE 0x14
                 _Linecomma:
000514           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x0:
0002e2 bbeb      	OUT  0x1B,R30
0002e3 e2ea      	LDI  R30,LOW(42)
0002e4 b9ec      	OUT  0xC,R30
0002e5 efa4      	LDI  R26,LOW(500)
0002e6 e0b1      	LDI  R27,HIGH(500)
0002e7 940c 031c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002e9 e0a0      	LDI  R26,LOW(_GetLine)
0002ea e0b5      	LDI  R27,HIGH(_GetLine)
0002eb 0fa0      	ADD  R26,R16
0002ec 1fb1      	ADC  R27,R17
0002ed 91ac      	LD   R26,X
0002ee 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002ef 81e8      	LD   R30,Y
0002f0 81f9      	LDD  R31,Y+1
0002f1 01de      	MOVW R26,R28
0002f2 9612      	ADIW R26,2
0002f3 0fae      	ADD  R26,R30
0002f4 1fbf      	ADC  R27,R31
0002f5 91ec      	LD   R30,X
0002f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0002f7 932a      	ST   -Y,R18
0002f8 85ad      	LDD  R26,Y+13
0002f9 85be      	LDD  R27,Y+13+1
0002fa 85ef      	LDD  R30,Y+15
0002fb 89f8      	LDD  R31,Y+15+1
0002fc 9509      	ICALL
0002fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x4:
0002fe 89e8      	LDD  R30,Y+16
0002ff 89f9      	LDD  R31,Y+16+1
000300 9734      	SBIW R30,4
000301 8be8      	STD  Y+16,R30
000302 8bf9      	STD  Y+16+1,R31
000303 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
000304 85ad      	LDD  R26,Y+13
000305 85be      	LDD  R27,Y+13+1
000306 85ef      	LDD  R30,Y+15
000307 89f8      	LDD  R31,Y+15+1
000308 9509      	ICALL
000309 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
00030a 89a8      	LDD  R26,Y+16
00030b 89b9      	LDD  R27,Y+16+1
00030c 9614      	ADIW R26,4
00030d 940e 034e 	CALL __GETW1P
00030f 83ee      	STD  Y+6,R30
000310 83ff      	STD  Y+6+1,R31
000311 81ae      	LDD  R26,Y+6
000312 81bf      	LDD  R27,Y+6+1
000313 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000314 89a8      	LDD  R26,Y+16
000315 89b9      	LDD  R27,Y+16+1
000316 9614      	ADIW R26,4
000317 940e 034e 	CALL __GETW1P
000319 87ea      	STD  Y+10,R30
00031a 87fb      	STD  Y+10+1,R31
00031b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00031c 9610      	adiw r26,0
00031d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00031e ea80     +LDI R24 , LOW ( 0xFA0 )
00031f e09f     +LDI R25 , HIGH ( 0xFA0 )
                +__DELAY_USW_LOOP :
000320 9701     +SBIW R24 , 1
000321 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA0
000322 95a8      	wdr
000323 9711      	sbiw r26,1
000324 f7c9      	brne __delay_ms0
                 __delay_ms1:
000325 9508      	ret
                 
                 __ADDW2R15:
000326 2400      	CLR  R0
000327 0daf      	ADD  R26,R15
000328 1db0      	ADC  R27,R0
000329 9508      	RET
                 
                 __ANEGW1:
00032a 95f1      	NEG  R31
00032b 95e1      	NEG  R30
00032c 40f0      	SBCI R31,0
00032d 9508      	RET
                 
                 __CWD1:
00032e 2f6f      	MOV  R22,R31
00032f 0f66      	ADD  R22,R22
000330 0b66      	SBC  R22,R22
000331 2f76      	MOV  R23,R22
000332 9508      	RET
                 
                 __MULW12U:
000333 9ffa      	MUL  R31,R26
000334 2df0      	MOV  R31,R0
000335 9feb      	MUL  R30,R27
000336 0df0      	ADD  R31,R0
000337 9fea      	MUL  R30,R26
000338 2de0      	MOV  R30,R0
000339 0df1      	ADD  R31,R1
00033a 9508      	RET
                 
                 __DIVW21U:
00033b 2400      	CLR  R0
00033c 2411      	CLR  R1
00033d e190      	LDI  R25,16
                 __DIVW21U1:
00033e 0faa      	LSL  R26
00033f 1fbb      	ROL  R27
000340 1c00      	ROL  R0
000341 1c11      	ROL  R1
000342 1a0e      	SUB  R0,R30
000343 0a1f      	SBC  R1,R31
000344 f418      	BRCC __DIVW21U2
000345 0e0e      	ADD  R0,R30
000346 1e1f      	ADC  R1,R31
000347 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000348 60a1      	SBR  R26,1
                 __DIVW21U3:
000349 959a      	DEC  R25
00034a f799      	BRNE __DIVW21U1
00034b 01fd      	MOVW R30,R26
00034c 01d0      	MOVW R26,R0
00034d 9508      	RET
                 
                 __GETW1P:
00034e 91ed      	LD   R30,X+
00034f 91fc      	LD   R31,X
000350 9711      	SBIW R26,1
000351 9508      	RET
                 
                 __GETW1PF:
000352 9005      	LPM  R0,Z+
000353 91f4      	LPM  R31,Z
000354 2de0      	MOV  R30,R0
000355 9508      	RET
                 
                 __PUTPARD1:
000356 937a      	ST   -Y,R23
000357 936a      	ST   -Y,R22
000358 93fa      	ST   -Y,R31
000359 93ea      	ST   -Y,R30
00035a 9508      	RET
                 
                 __SAVELOCR6:
00035b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00035c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00035d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00035e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00035f 931a      	ST   -Y,R17
000360 930a      	ST   -Y,R16
000361 9508      	RET
                 
                 __LOADLOCR6:
000362 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000363 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000364 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000365 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000366 8119      	LDD  R17,Y+1
000367 8108      	LD   R16,Y
000368 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :  19 r1 :   6 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  37 r17:  24 r18:  31 r19:  11 r20:   9 r21:  19 r22:  15 r23:   4 
r24:  12 r25:   5 r26:  80 r27:  38 r28:  14 r29:   1 r30: 182 r31:  84 
x  :  17 y  : 144 z  :  18 
Registers used: 24 out of 35 (68.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  10 
adiw  :  19 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  14 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   1 brmi  :   0 brne  :  26 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  45 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  16 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   2 cpi   :  32 cpse  :   0 dec   :   2 des   :   0 
elpm  :   0 eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 
ijmp  :   0 in    :   4 inc   :   1 jmp   :  37 ld    :  24 ldd   :  60 
ldi   :  93 lds   :   8 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  17 
movw  :  19 mul   :   4 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 
or    :   2 ori   :   6 out   :  27 pop   :   1 push  :   1 rcall :   2 
ret   :  24 reti  :   1 rjmp  :  58 rol   :   4 ror   :   0 sbc   :   3 
sbci  :   9 sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :  13 sbr   :   1 
sbrc  :   2 sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :  48 std   :  35 sts   :   3 sub   :   2 subi  :  21 
swap  :   0 tst   :   3 wdr   :   1 
Instructions used: 57 out of 117 (48.7%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006d2   1700     46   1746  131072   1.3%
[.dseg] 0x000100 0x00051c      0     28     28    4096   0.7%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
